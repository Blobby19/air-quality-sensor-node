// Code generated by protoc-gen-go. DO NOT EDIT.
// source: aq.proto

package aqpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Sample -- represents one packet of data from the air quality unit.
// When extending this keep in mind that dealing with protobuffers on
// constrained platforms dealing with nested structures can be a bit
// of a pain, so we try to keep this message as simple as possible.
//
type Sample struct {
	// ---------- Board fields ----------
	Sysid            int64   `protobuf:"varint,1,opt,name=sysid,proto3" json:"sysid,omitempty"`
	FirmwareVersion  int64   `protobuf:"varint,2,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	Uptime           int64   `protobuf:"varint,3,opt,name=uptime,proto3" json:"uptime,omitempty"`
	BoardTemp        float64 `protobuf:"fixed64,4,opt,name=board_temp,json=boardTemp,proto3" json:"board_temp,omitempty"`
	BoardRelHumidity float64 `protobuf:"fixed64,5,opt,name=board_rel_humidity,json=boardRelHumidity,proto3" json:"board_rel_humidity,omitempty"`
	// ---------- GPS fields ----------
	// If the GPS cannot get a fix these fields will all be zeroed.
	GpsTimestamp float64 `protobuf:"fixed64,6,opt,name=gps_timestamp,json=gpsTimestamp,proto3" json:"gps_timestamp,omitempty"`
	Lat          float64 `protobuf:"fixed64,7,opt,name=lat,proto3" json:"lat,omitempty"`
	Long         float64 `protobuf:"fixed64,8,opt,name=long,proto3" json:"long,omitempty"`
	Alt          float64 `protobuf:"fixed64,9,opt,name=alt,proto3" json:"alt,omitempty"`
	// ---------- AFE3 fields ----------
	// In order to obtain the measurement in mV the sensor readinggs
	// below have to be multiplied by 0.000000596046.  On the
	// calibration datasheet for each sensor there will be an offset
	// value for each sensor (given in mV).
	//
	Sensor_1Work      uint32 `protobuf:"varint,10,opt,name=sensor_1_work,json=sensor1Work,proto3" json:"sensor_1_work,omitempty"`
	Sensor_1Aux       uint32 `protobuf:"varint,11,opt,name=sensor_1_aux,json=sensor1Aux,proto3" json:"sensor_1_aux,omitempty"`
	Sensor_2Work      uint32 `protobuf:"varint,12,opt,name=sensor_2_work,json=sensor2Work,proto3" json:"sensor_2_work,omitempty"`
	Sensor_2Aux       uint32 `protobuf:"varint,13,opt,name=sensor_2_aux,json=sensor2Aux,proto3" json:"sensor_2_aux,omitempty"`
	Sensor_3Work      uint32 `protobuf:"varint,14,opt,name=sensor_3_work,json=sensor3Work,proto3" json:"sensor_3_work,omitempty"`
	Sensor_3Aux       uint32 `protobuf:"varint,15,opt,name=sensor_3_aux,json=sensor3Aux,proto3" json:"sensor_3_aux,omitempty"`
	Afe3Temp          uint32 `protobuf:"varint,16,opt,name=afe3_temp,json=afe3Temp,proto3" json:"afe3_temp,omitempty"`
	OpcPmA            uint32 `protobuf:"varint,17,opt,name=opc_pm_a,json=opcPmA,proto3" json:"opc_pm_a,omitempty"`
	OpcPmB            uint32 `protobuf:"varint,18,opt,name=opc_pm_b,json=opcPmB,proto3" json:"opc_pm_b,omitempty"`
	OpcPmC            uint32 `protobuf:"varint,19,opt,name=opc_pm_c,json=opcPmC,proto3" json:"opc_pm_c,omitempty"`
	OpcSamplePeriod   uint32 `protobuf:"varint,20,opt,name=opc_sample_period,json=opcSamplePeriod,proto3" json:"opc_sample_period,omitempty"`
	OpcSampleFlowRate uint32 `protobuf:"varint,21,opt,name=opc_sample_flow_rate,json=opcSampleFlowRate,proto3" json:"opc_sample_flow_rate,omitempty"`
	OpcTemp           uint32 `protobuf:"varint,22,opt,name=opc_temp,json=opcTemp,proto3" json:"opc_temp,omitempty"`
	OpcFanRpm         uint32 `protobuf:"varint,23,opt,name=opc_fan_rpm,json=opcFanRpm,proto3" json:"opc_fan_rpm,omitempty"`
	OpcLaserStatus    uint32 `protobuf:"varint,24,opt,name=opc_laser_status,json=opcLaserStatus,proto3" json:"opc_laser_status,omitempty"`
	OpcSampleValid    uint32 `protobuf:"varint,25,opt,name=opc_sample_valid,json=opcSampleValid,proto3" json:"opc_sample_valid,omitempty"`
	// OPC PM bin 1 to 24
	OpcBin               []uint32 `protobuf:"varint,26,rep,packed,name=opc_bin,json=opcBin,proto3" json:"opc_bin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Sample) Reset()         { *m = Sample{} }
func (m *Sample) String() string { return proto.CompactTextString(m) }
func (*Sample) ProtoMessage()    {}
func (*Sample) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a27da7815c4cf2a, []int{0}
}

func (m *Sample) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sample.Unmarshal(m, b)
}
func (m *Sample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sample.Marshal(b, m, deterministic)
}
func (m *Sample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sample.Merge(m, src)
}
func (m *Sample) XXX_Size() int {
	return xxx_messageInfo_Sample.Size(m)
}
func (m *Sample) XXX_DiscardUnknown() {
	xxx_messageInfo_Sample.DiscardUnknown(m)
}

var xxx_messageInfo_Sample proto.InternalMessageInfo

func (m *Sample) GetSysid() int64 {
	if m != nil {
		return m.Sysid
	}
	return 0
}

func (m *Sample) GetFirmwareVersion() int64 {
	if m != nil {
		return m.FirmwareVersion
	}
	return 0
}

func (m *Sample) GetUptime() int64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *Sample) GetBoardTemp() float64 {
	if m != nil {
		return m.BoardTemp
	}
	return 0
}

func (m *Sample) GetBoardRelHumidity() float64 {
	if m != nil {
		return m.BoardRelHumidity
	}
	return 0
}

func (m *Sample) GetGpsTimestamp() float64 {
	if m != nil {
		return m.GpsTimestamp
	}
	return 0
}

func (m *Sample) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Sample) GetLong() float64 {
	if m != nil {
		return m.Long
	}
	return 0
}

func (m *Sample) GetAlt() float64 {
	if m != nil {
		return m.Alt
	}
	return 0
}

func (m *Sample) GetSensor_1Work() uint32 {
	if m != nil {
		return m.Sensor_1Work
	}
	return 0
}

func (m *Sample) GetSensor_1Aux() uint32 {
	if m != nil {
		return m.Sensor_1Aux
	}
	return 0
}

func (m *Sample) GetSensor_2Work() uint32 {
	if m != nil {
		return m.Sensor_2Work
	}
	return 0
}

func (m *Sample) GetSensor_2Aux() uint32 {
	if m != nil {
		return m.Sensor_2Aux
	}
	return 0
}

func (m *Sample) GetSensor_3Work() uint32 {
	if m != nil {
		return m.Sensor_3Work
	}
	return 0
}

func (m *Sample) GetSensor_3Aux() uint32 {
	if m != nil {
		return m.Sensor_3Aux
	}
	return 0
}

func (m *Sample) GetAfe3Temp() uint32 {
	if m != nil {
		return m.Afe3Temp
	}
	return 0
}

func (m *Sample) GetOpcPmA() uint32 {
	if m != nil {
		return m.OpcPmA
	}
	return 0
}

func (m *Sample) GetOpcPmB() uint32 {
	if m != nil {
		return m.OpcPmB
	}
	return 0
}

func (m *Sample) GetOpcPmC() uint32 {
	if m != nil {
		return m.OpcPmC
	}
	return 0
}

func (m *Sample) GetOpcSamplePeriod() uint32 {
	if m != nil {
		return m.OpcSamplePeriod
	}
	return 0
}

func (m *Sample) GetOpcSampleFlowRate() uint32 {
	if m != nil {
		return m.OpcSampleFlowRate
	}
	return 0
}

func (m *Sample) GetOpcTemp() uint32 {
	if m != nil {
		return m.OpcTemp
	}
	return 0
}

func (m *Sample) GetOpcFanRpm() uint32 {
	if m != nil {
		return m.OpcFanRpm
	}
	return 0
}

func (m *Sample) GetOpcLaserStatus() uint32 {
	if m != nil {
		return m.OpcLaserStatus
	}
	return 0
}

func (m *Sample) GetOpcSampleValid() uint32 {
	if m != nil {
		return m.OpcSampleValid
	}
	return 0
}

func (m *Sample) GetOpcBin() []uint32 {
	if m != nil {
		return m.OpcBin
	}
	return nil
}

func init() {
	proto.RegisterType((*Sample)(nil), "aqpb.Sample")
}

func init() {
	proto.RegisterFile("aq.proto", fileDescriptor_2a27da7815c4cf2a)
}

var fileDescriptor_2a27da7815c4cf2a = []byte{
	// 514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x93, 0xd1, 0x4e, 0xdb, 0x30,
	0x14, 0x86, 0x15, 0x0a, 0xa1, 0x3d, 0x6d, 0x21, 0xf5, 0x3a, 0x76, 0x60, 0xda, 0x54, 0xb1, 0x5d,
	0x74, 0xd3, 0xb4, 0x89, 0xe6, 0x01, 0x10, 0x9d, 0x84, 0x76, 0xb1, 0x0b, 0x14, 0x10, 0xbb, 0xb4,
	0x9c, 0xd4, 0xed, 0x22, 0x92, 0xd8, 0xd8, 0x2e, 0x85, 0xbb, 0x3d, 0x03, 0x8f, 0xb7, 0xa7, 0x99,
	0x72, 0xdc, 0x56, 0x19, 0x77, 0xf1, 0xff, 0x7f, 0xfa, 0x6c, 0x1f, 0x39, 0xd0, 0x16, 0xf7, 0x5f,
	0xb5, 0x51, 0x4e, 0xb1, 0x5d, 0x71, 0xaf, 0xd3, 0x93, 0x5e, 0x25, 0x2a, 0xa5, 0x53, 0x9f, 0x9d,
	0xfe, 0x0d, 0x21, 0xbc, 0x16, 0xa5, 0x2e, 0x24, 0x1b, 0xc2, 0x9e, 0x7d, 0xb2, 0xf9, 0x0c, 0x83,
	0x51, 0x30, 0x6e, 0x25, 0x7e, 0xc1, 0x3e, 0x41, 0x34, 0xcf, 0x4d, 0xb9, 0x12, 0x46, 0xf2, 0x07,
	0x69, 0x6c, 0xae, 0x2a, 0xdc, 0x21, 0xe0, 0x70, 0x93, 0xdf, 0xfa, 0x98, 0x1d, 0x41, 0xb8, 0xd4,
	0x2e, 0x2f, 0x25, 0xb6, 0x08, 0x58, 0xaf, 0xd8, 0x3b, 0x80, 0x54, 0x09, 0x33, 0xe3, 0x4e, 0x96,
	0x1a, 0x77, 0x47, 0xc1, 0x38, 0x48, 0x3a, 0x94, 0xdc, 0xc8, 0x52, 0xb3, 0x2f, 0xc0, 0x7c, 0x6d,
	0x64, 0xc1, 0x7f, 0x2f, 0xcb, 0x7c, 0x96, 0xbb, 0x27, 0xdc, 0x23, 0x2c, 0xa2, 0x26, 0x91, 0xc5,
	0x8f, 0x75, 0xce, 0x3e, 0x40, 0x7f, 0xa1, 0x2d, 0xaf, 0xc5, 0xd6, 0x89, 0x52, 0x63, 0x48, 0x60,
	0x6f, 0xa1, 0xed, 0xcd, 0x26, 0x63, 0x11, 0xb4, 0x0a, 0xe1, 0x70, 0x9f, 0xaa, 0xfa, 0x93, 0x31,
	0xd8, 0x2d, 0x54, 0xb5, 0xc0, 0x36, 0x45, 0xf4, 0x5d, 0x53, 0xa2, 0x70, 0xd8, 0xf1, 0x94, 0x28,
	0x1c, 0x3b, 0x85, 0xbe, 0x95, 0x95, 0x55, 0x86, 0x9f, 0xf1, 0x95, 0x32, 0x77, 0x08, 0xa3, 0x60,
	0xdc, 0x4f, 0xba, 0x3e, 0x3c, 0xfb, 0xa5, 0xcc, 0x1d, 0x1b, 0x41, 0x6f, 0xcb, 0x88, 0xe5, 0x23,
	0x76, 0x09, 0x81, 0x35, 0x72, 0xb1, 0x7c, 0x6c, 0x58, 0x26, 0xde, 0xd2, 0x6b, 0x5a, 0x26, 0x2f,
	0x2c, 0x13, 0xb2, 0xf4, 0x9b, 0x96, 0xc9, 0xff, 0x96, 0xd8, 0x5b, 0x0e, 0x9a, 0x96, 0xf8, 0x85,
	0x25, 0x26, 0xcb, 0x61, 0xd3, 0x12, 0xd7, 0x96, 0xb7, 0xd0, 0x11, 0x73, 0x19, 0xfb, 0xd1, 0x47,
	0x54, 0xb7, 0xeb, 0x80, 0x26, 0x8f, 0xd0, 0x56, 0x3a, 0xe3, 0xba, 0xe4, 0x02, 0x07, 0xd4, 0x85,
	0x4a, 0x67, 0x57, 0xe5, 0x45, 0xa3, 0x49, 0x91, 0x35, 0x9a, 0x69, 0xa3, 0xc9, 0xf0, 0x55, 0xa3,
	0xf9, 0xce, 0x3e, 0xc3, 0xa0, 0x6e, 0x2c, 0xbd, 0x26, 0xae, 0xa5, 0xc9, 0xd5, 0x0c, 0x87, 0x84,
	0x1c, 0x2a, 0x9d, 0xf9, 0x57, 0x76, 0x45, 0x31, 0xfb, 0x06, 0xc3, 0x06, 0x3b, 0x2f, 0xd4, 0x8a,
	0x1b, 0xe1, 0x24, 0xbe, 0x26, 0x7c, 0xb0, 0xc5, 0x2f, 0x0b, 0xb5, 0x4a, 0x84, 0x93, 0xec, 0xd8,
	0x6f, 0x4b, 0xd7, 0x38, 0x22, 0x68, 0x5f, 0xe9, 0x8c, 0x6e, 0xf1, 0x1e, 0xba, 0x75, 0x35, 0x17,
	0x15, 0x37, 0xba, 0xc4, 0x37, 0xd4, 0x76, 0x94, 0xce, 0x2e, 0x45, 0x95, 0xe8, 0x92, 0x8d, 0x21,
	0xaa, 0xfb, 0x42, 0x58, 0x69, 0xb8, 0x75, 0xc2, 0x2d, 0x2d, 0x22, 0x41, 0x07, 0x4a, 0x67, 0x3f,
	0xeb, 0xf8, 0x9a, 0xd2, 0x0d, 0xb9, 0x3e, 0xd5, 0x83, 0x28, 0xf2, 0x19, 0x1e, 0x6f, 0x49, 0x7f,
	0xa2, 0xdb, 0x3a, 0x65, 0x1f, 0xa1, 0xde, 0x9e, 0xa7, 0x79, 0x85, 0x27, 0xa3, 0xd6, 0xb8, 0x3f,
	0xed, 0x3e, 0x9f, 0xef, 0x44, 0xf8, 0x7c, 0xde, 0xfa, 0x13, 0x04, 0x34, 0x91, 0x69, 0x5e, 0xa5,
	0x21, 0xfd, 0x63, 0xf1, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7b, 0xbe, 0xfe, 0xcc, 0x83, 0x03,
	0x00, 0x00,
}
