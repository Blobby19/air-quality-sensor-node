// Code generated by protoc-gen-go. DO NOT EDIT.
// source: aq.proto

package aqpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Sample -- represents one packet of data from the air quality unit.
// When extending this keep in mind that dealing with protobuffers on
// constrained platforms dealing with nested structures can be a bit
// of a pain, so we try to keep this message as simple as possible.
//
type Sample struct {
	// ---------- Board fields ----------
	Sysid            uint64  `protobuf:"varint,1,opt,name=sysid,proto3" json:"sysid,omitempty"`
	FirmwareVersion  uint64  `protobuf:"varint,2,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	Uptime           int64   `protobuf:"varint,3,opt,name=uptime,proto3" json:"uptime,omitempty"`
	BoardTemp        float32 `protobuf:"fixed32,4,opt,name=board_temp,json=boardTemp,proto3" json:"board_temp,omitempty"`
	BoardRelHumidity float32 `protobuf:"fixed32,5,opt,name=board_rel_humidity,json=boardRelHumidity,proto3" json:"board_rel_humidity,omitempty"`
	Status           uint64  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	// ---------- GPS fields ----------
	// If the GPS cannot get a fix these fields will all be zeroed.
	GpsTimestamp float32 `protobuf:"fixed32,7,opt,name=gps_timestamp,json=gpsTimestamp,proto3" json:"gps_timestamp,omitempty"`
	Lat          float32 `protobuf:"fixed32,8,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon          float32 `protobuf:"fixed32,9,opt,name=lon,proto3" json:"lon,omitempty"`
	Alt          float32 `protobuf:"fixed32,10,opt,name=alt,proto3" json:"alt,omitempty"`
	// ---------- AFE3 fields ----------
	// In order to obtain the measurement in mV the sensor readinggs
	// below have to be multiplied by 0.000000596046.  On the
	// calibration datasheet for each sensor there will be an offset
	// value for each sensor (given in mV).
	//
	Sensor_1Work      uint32 `protobuf:"varint,20,opt,name=sensor_1_work,json=sensor1Work,proto3" json:"sensor_1_work,omitempty"`
	Sensor_1Aux       uint32 `protobuf:"varint,21,opt,name=sensor_1_aux,json=sensor1Aux,proto3" json:"sensor_1_aux,omitempty"`
	Sensor_2Work      uint32 `protobuf:"varint,22,opt,name=sensor_2_work,json=sensor2Work,proto3" json:"sensor_2_work,omitempty"`
	Sensor_2Aux       uint32 `protobuf:"varint,23,opt,name=sensor_2_aux,json=sensor2Aux,proto3" json:"sensor_2_aux,omitempty"`
	Sensor_3Work      uint32 `protobuf:"varint,24,opt,name=sensor_3_work,json=sensor3Work,proto3" json:"sensor_3_work,omitempty"`
	Sensor_3Aux       uint32 `protobuf:"varint,25,opt,name=sensor_3_aux,json=sensor3Aux,proto3" json:"sensor_3_aux,omitempty"`
	Afe3Temp          uint32 `protobuf:"varint,26,opt,name=afe3_temp,json=afe3Temp,proto3" json:"afe3_temp,omitempty"`
	OpcPmA            uint32 `protobuf:"varint,30,opt,name=opc_pm_a,json=opcPmA,proto3" json:"opc_pm_a,omitempty"`
	OpcPmB            uint32 `protobuf:"varint,31,opt,name=opc_pm_b,json=opcPmB,proto3" json:"opc_pm_b,omitempty"`
	OpcPmC            uint32 `protobuf:"varint,32,opt,name=opc_pm_c,json=opcPmC,proto3" json:"opc_pm_c,omitempty"`
	OpcSamplePeriod   uint32 `protobuf:"varint,33,opt,name=opc_sample_period,json=opcSamplePeriod,proto3" json:"opc_sample_period,omitempty"`
	OpcSampleFlowRate uint32 `protobuf:"varint,34,opt,name=opc_sample_flow_rate,json=opcSampleFlowRate,proto3" json:"opc_sample_flow_rate,omitempty"`
	OpcTemp           uint32 `protobuf:"varint,35,opt,name=opc_temp,json=opcTemp,proto3" json:"opc_temp,omitempty"`
	OpcFanRpm         uint32 `protobuf:"varint,36,opt,name=opc_fan_rpm,json=opcFanRpm,proto3" json:"opc_fan_rpm,omitempty"`
	OpcLaserStatus    uint32 `protobuf:"varint,37,opt,name=opc_laser_status,json=opcLaserStatus,proto3" json:"opc_laser_status,omitempty"`
	OpcSampleValid    uint32 `protobuf:"varint,38,opt,name=opc_sample_valid,json=opcSampleValid,proto3" json:"opc_sample_valid,omitempty"`
	// OPC PM bin 0 to 23
	OpcBin_0             uint32   `protobuf:"varint,39,opt,name=opc_bin_0,json=opcBin0,proto3" json:"opc_bin_0,omitempty"`
	OpcBin_1             uint32   `protobuf:"varint,40,opt,name=opc_bin_1,json=opcBin1,proto3" json:"opc_bin_1,omitempty"`
	OpcBin_2             uint32   `protobuf:"varint,41,opt,name=opc_bin_2,json=opcBin2,proto3" json:"opc_bin_2,omitempty"`
	OpcBin_3             uint32   `protobuf:"varint,42,opt,name=opc_bin_3,json=opcBin3,proto3" json:"opc_bin_3,omitempty"`
	OpcBin_4             uint32   `protobuf:"varint,43,opt,name=opc_bin_4,json=opcBin4,proto3" json:"opc_bin_4,omitempty"`
	OpcBin_5             uint32   `protobuf:"varint,44,opt,name=opc_bin_5,json=opcBin5,proto3" json:"opc_bin_5,omitempty"`
	OpcBin_6             uint32   `protobuf:"varint,45,opt,name=opc_bin_6,json=opcBin6,proto3" json:"opc_bin_6,omitempty"`
	OpcBin_7             uint32   `protobuf:"varint,46,opt,name=opc_bin_7,json=opcBin7,proto3" json:"opc_bin_7,omitempty"`
	OpcBin_8             uint32   `protobuf:"varint,47,opt,name=opc_bin_8,json=opcBin8,proto3" json:"opc_bin_8,omitempty"`
	OpcBin_9             uint32   `protobuf:"varint,48,opt,name=opc_bin_9,json=opcBin9,proto3" json:"opc_bin_9,omitempty"`
	OpcBin_10            uint32   `protobuf:"varint,49,opt,name=opc_bin_10,json=opcBin10,proto3" json:"opc_bin_10,omitempty"`
	OpcBin_11            uint32   `protobuf:"varint,50,opt,name=opc_bin_11,json=opcBin11,proto3" json:"opc_bin_11,omitempty"`
	OpcBin_12            uint32   `protobuf:"varint,51,opt,name=opc_bin_12,json=opcBin12,proto3" json:"opc_bin_12,omitempty"`
	OpcBin_13            uint32   `protobuf:"varint,52,opt,name=opc_bin_13,json=opcBin13,proto3" json:"opc_bin_13,omitempty"`
	OpcBin_14            uint32   `protobuf:"varint,53,opt,name=opc_bin_14,json=opcBin14,proto3" json:"opc_bin_14,omitempty"`
	OpcBin_15            uint32   `protobuf:"varint,54,opt,name=opc_bin_15,json=opcBin15,proto3" json:"opc_bin_15,omitempty"`
	OpcBin_16            uint32   `protobuf:"varint,55,opt,name=opc_bin_16,json=opcBin16,proto3" json:"opc_bin_16,omitempty"`
	OpcBin_17            uint32   `protobuf:"varint,56,opt,name=opc_bin_17,json=opcBin17,proto3" json:"opc_bin_17,omitempty"`
	OpcBin_18            uint32   `protobuf:"varint,57,opt,name=opc_bin_18,json=opcBin18,proto3" json:"opc_bin_18,omitempty"`
	OpcBin_19            uint32   `protobuf:"varint,58,opt,name=opc_bin_19,json=opcBin19,proto3" json:"opc_bin_19,omitempty"`
	OpcBin_20            uint32   `protobuf:"varint,59,opt,name=opc_bin_20,json=opcBin20,proto3" json:"opc_bin_20,omitempty"`
	OpcBin_21            uint32   `protobuf:"varint,60,opt,name=opc_bin_21,json=opcBin21,proto3" json:"opc_bin_21,omitempty"`
	OpcBin_22            uint32   `protobuf:"varint,61,opt,name=opc_bin_22,json=opcBin22,proto3" json:"opc_bin_22,omitempty"`
	OpcBin_23            uint32   `protobuf:"varint,62,opt,name=opc_bin_23,json=opcBin23,proto3" json:"opc_bin_23,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Sample) Reset()         { *m = Sample{} }
func (m *Sample) String() string { return proto.CompactTextString(m) }
func (*Sample) ProtoMessage()    {}
func (*Sample) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a27da7815c4cf2a, []int{0}
}

func (m *Sample) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sample.Unmarshal(m, b)
}
func (m *Sample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sample.Marshal(b, m, deterministic)
}
func (m *Sample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sample.Merge(m, src)
}
func (m *Sample) XXX_Size() int {
	return xxx_messageInfo_Sample.Size(m)
}
func (m *Sample) XXX_DiscardUnknown() {
	xxx_messageInfo_Sample.DiscardUnknown(m)
}

var xxx_messageInfo_Sample proto.InternalMessageInfo

func (m *Sample) GetSysid() uint64 {
	if m != nil {
		return m.Sysid
	}
	return 0
}

func (m *Sample) GetFirmwareVersion() uint64 {
	if m != nil {
		return m.FirmwareVersion
	}
	return 0
}

func (m *Sample) GetUptime() int64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *Sample) GetBoardTemp() float32 {
	if m != nil {
		return m.BoardTemp
	}
	return 0
}

func (m *Sample) GetBoardRelHumidity() float32 {
	if m != nil {
		return m.BoardRelHumidity
	}
	return 0
}

func (m *Sample) GetStatus() uint64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Sample) GetGpsTimestamp() float32 {
	if m != nil {
		return m.GpsTimestamp
	}
	return 0
}

func (m *Sample) GetLat() float32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Sample) GetLon() float32 {
	if m != nil {
		return m.Lon
	}
	return 0
}

func (m *Sample) GetAlt() float32 {
	if m != nil {
		return m.Alt
	}
	return 0
}

func (m *Sample) GetSensor_1Work() uint32 {
	if m != nil {
		return m.Sensor_1Work
	}
	return 0
}

func (m *Sample) GetSensor_1Aux() uint32 {
	if m != nil {
		return m.Sensor_1Aux
	}
	return 0
}

func (m *Sample) GetSensor_2Work() uint32 {
	if m != nil {
		return m.Sensor_2Work
	}
	return 0
}

func (m *Sample) GetSensor_2Aux() uint32 {
	if m != nil {
		return m.Sensor_2Aux
	}
	return 0
}

func (m *Sample) GetSensor_3Work() uint32 {
	if m != nil {
		return m.Sensor_3Work
	}
	return 0
}

func (m *Sample) GetSensor_3Aux() uint32 {
	if m != nil {
		return m.Sensor_3Aux
	}
	return 0
}

func (m *Sample) GetAfe3Temp() uint32 {
	if m != nil {
		return m.Afe3Temp
	}
	return 0
}

func (m *Sample) GetOpcPmA() uint32 {
	if m != nil {
		return m.OpcPmA
	}
	return 0
}

func (m *Sample) GetOpcPmB() uint32 {
	if m != nil {
		return m.OpcPmB
	}
	return 0
}

func (m *Sample) GetOpcPmC() uint32 {
	if m != nil {
		return m.OpcPmC
	}
	return 0
}

func (m *Sample) GetOpcSamplePeriod() uint32 {
	if m != nil {
		return m.OpcSamplePeriod
	}
	return 0
}

func (m *Sample) GetOpcSampleFlowRate() uint32 {
	if m != nil {
		return m.OpcSampleFlowRate
	}
	return 0
}

func (m *Sample) GetOpcTemp() uint32 {
	if m != nil {
		return m.OpcTemp
	}
	return 0
}

func (m *Sample) GetOpcFanRpm() uint32 {
	if m != nil {
		return m.OpcFanRpm
	}
	return 0
}

func (m *Sample) GetOpcLaserStatus() uint32 {
	if m != nil {
		return m.OpcLaserStatus
	}
	return 0
}

func (m *Sample) GetOpcSampleValid() uint32 {
	if m != nil {
		return m.OpcSampleValid
	}
	return 0
}

func (m *Sample) GetOpcBin_0() uint32 {
	if m != nil {
		return m.OpcBin_0
	}
	return 0
}

func (m *Sample) GetOpcBin_1() uint32 {
	if m != nil {
		return m.OpcBin_1
	}
	return 0
}

func (m *Sample) GetOpcBin_2() uint32 {
	if m != nil {
		return m.OpcBin_2
	}
	return 0
}

func (m *Sample) GetOpcBin_3() uint32 {
	if m != nil {
		return m.OpcBin_3
	}
	return 0
}

func (m *Sample) GetOpcBin_4() uint32 {
	if m != nil {
		return m.OpcBin_4
	}
	return 0
}

func (m *Sample) GetOpcBin_5() uint32 {
	if m != nil {
		return m.OpcBin_5
	}
	return 0
}

func (m *Sample) GetOpcBin_6() uint32 {
	if m != nil {
		return m.OpcBin_6
	}
	return 0
}

func (m *Sample) GetOpcBin_7() uint32 {
	if m != nil {
		return m.OpcBin_7
	}
	return 0
}

func (m *Sample) GetOpcBin_8() uint32 {
	if m != nil {
		return m.OpcBin_8
	}
	return 0
}

func (m *Sample) GetOpcBin_9() uint32 {
	if m != nil {
		return m.OpcBin_9
	}
	return 0
}

func (m *Sample) GetOpcBin_10() uint32 {
	if m != nil {
		return m.OpcBin_10
	}
	return 0
}

func (m *Sample) GetOpcBin_11() uint32 {
	if m != nil {
		return m.OpcBin_11
	}
	return 0
}

func (m *Sample) GetOpcBin_12() uint32 {
	if m != nil {
		return m.OpcBin_12
	}
	return 0
}

func (m *Sample) GetOpcBin_13() uint32 {
	if m != nil {
		return m.OpcBin_13
	}
	return 0
}

func (m *Sample) GetOpcBin_14() uint32 {
	if m != nil {
		return m.OpcBin_14
	}
	return 0
}

func (m *Sample) GetOpcBin_15() uint32 {
	if m != nil {
		return m.OpcBin_15
	}
	return 0
}

func (m *Sample) GetOpcBin_16() uint32 {
	if m != nil {
		return m.OpcBin_16
	}
	return 0
}

func (m *Sample) GetOpcBin_17() uint32 {
	if m != nil {
		return m.OpcBin_17
	}
	return 0
}

func (m *Sample) GetOpcBin_18() uint32 {
	if m != nil {
		return m.OpcBin_18
	}
	return 0
}

func (m *Sample) GetOpcBin_19() uint32 {
	if m != nil {
		return m.OpcBin_19
	}
	return 0
}

func (m *Sample) GetOpcBin_20() uint32 {
	if m != nil {
		return m.OpcBin_20
	}
	return 0
}

func (m *Sample) GetOpcBin_21() uint32 {
	if m != nil {
		return m.OpcBin_21
	}
	return 0
}

func (m *Sample) GetOpcBin_22() uint32 {
	if m != nil {
		return m.OpcBin_22
	}
	return 0
}

func (m *Sample) GetOpcBin_23() uint32 {
	if m != nil {
		return m.OpcBin_23
	}
	return 0
}

func init() {
	proto.RegisterType((*Sample)(nil), "aqpb.Sample")
}

func init() {
	proto.RegisterFile("aq.proto", fileDescriptor_2a27da7815c4cf2a)
}

var fileDescriptor_2a27da7815c4cf2a = []byte{
	// 669 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0xd5, 0x5d, 0x4f, 0xdb, 0x3a,
	0x18, 0x07, 0x70, 0x95, 0x97, 0xd2, 0x1a, 0x38, 0x14, 0x8b, 0xc3, 0x79, 0xe0, 0x6c, 0xac, 0x83,
	0xbd, 0x14, 0xc6, 0xa0, 0x71, 0xfa, 0x3a, 0xb6, 0x49, 0x30, 0x09, 0xed, 0x62, 0x17, 0xa8, 0x20,
	0x26, 0xed, 0xc6, 0x72, 0x53, 0x97, 0x45, 0x24, 0xb1, 0x49, 0x52, 0x0a, 0x5f, 0x60, 0x9f, 0x7b,
	0x8a, 0x13, 0xaa, 0xc7, 0xdc, 0x35, 0xff, 0xdf, 0xa3, 0x7f, 0x6c, 0xd7, 0x52, 0x48, 0x45, 0xdc,
	0x1d, 0xe9, 0x58, 0xa5, 0x8a, 0x2e, 0x88, 0x3b, 0x3d, 0xdc, 0xfd, 0xb3, 0x42, 0xca, 0x97, 0x22,
	0xd4, 0x81, 0xa4, 0x1b, 0x64, 0x31, 0x79, 0x4c, 0xfc, 0x11, 0x94, 0xea, 0xa5, 0xc6, 0xc2, 0x20,
	0x7f, 0xa0, 0xfb, 0xa4, 0x36, 0xf6, 0xe3, 0x70, 0x2a, 0x62, 0xc9, 0xef, 0x65, 0x9c, 0xf8, 0x2a,
	0x82, 0x39, 0x33, 0xb0, 0xf6, 0x94, 0x5f, 0xe7, 0x31, 0xdd, 0x24, 0xe5, 0x89, 0x4e, 0xfd, 0x50,
	0xc2, 0x7c, 0xbd, 0xd4, 0x98, 0x1f, 0x14, 0x4f, 0xf4, 0x25, 0x21, 0x43, 0x25, 0xe2, 0x11, 0x4f,
	0x65, 0xa8, 0x61, 0xa1, 0x5e, 0x6a, 0xcc, 0x0d, 0xaa, 0x26, 0xb9, 0x92, 0xa1, 0xa6, 0x87, 0x84,
	0xe6, 0x1c, 0xcb, 0x80, 0xff, 0x9e, 0x84, 0xfe, 0xc8, 0x4f, 0x1f, 0x61, 0xd1, 0x8c, 0xd5, 0x8c,
	0x0c, 0x64, 0xf0, 0xbd, 0xc8, 0xb3, 0x97, 0x24, 0xa9, 0x48, 0x27, 0x09, 0x94, 0xcd, 0x2a, 0x8a,
	0x27, 0xba, 0x47, 0x56, 0x6f, 0x74, 0xc2, 0xb3, 0x17, 0x26, 0xa9, 0x08, 0x35, 0x2c, 0x99, 0x82,
	0x95, 0x1b, 0x9d, 0x5c, 0x3d, 0x65, 0xb4, 0x46, 0xe6, 0x03, 0x91, 0x42, 0xc5, 0x50, 0xf6, 0xd3,
	0x24, 0x2a, 0x82, 0x6a, 0x91, 0xa8, 0x28, 0x4b, 0x44, 0x90, 0x02, 0xc9, 0x13, 0x11, 0xa4, 0x74,
	0x97, 0xac, 0x26, 0x32, 0x4a, 0x54, 0xcc, 0x1d, 0x3e, 0x55, 0xf1, 0x2d, 0x6c, 0xd4, 0x4b, 0x8d,
	0xd5, 0xc1, 0x72, 0x1e, 0x3a, 0x3f, 0x55, 0x7c, 0x4b, 0xeb, 0x64, 0x65, 0x36, 0x23, 0x26, 0x0f,
	0xf0, 0xaf, 0x19, 0x21, 0xc5, 0xc8, 0xe9, 0xe4, 0x01, 0xb5, 0xb0, 0xbc, 0x65, 0x13, 0xb7, 0xb0,
	0x67, 0x2d, 0xcc, 0xb4, 0xfc, 0x87, 0x5b, 0x98, 0xdd, 0xe2, 0xe6, 0x2d, 0x80, 0x5b, 0xdc, 0x67,
	0x2d, 0xae, 0x69, 0xd9, 0xc2, 0x2d, 0x6e, 0xd6, 0xf2, 0x3f, 0xa9, 0x8a, 0xb1, 0x74, 0xf3, 0x3f,
	0x64, 0xdb, 0x70, 0x25, 0x0b, 0xcc, 0xff, 0x01, 0xa4, 0xa2, 0xb4, 0xc7, 0x75, 0xc8, 0x05, 0xec,
	0x18, 0x2b, 0x2b, 0xed, 0x5d, 0x84, 0xa7, 0x48, 0x86, 0xf0, 0x0a, 0xc9, 0x19, 0x12, 0x0f, 0xea,
	0x48, 0xbe, 0xd1, 0x03, 0xb2, 0x9e, 0x49, 0x62, 0xee, 0x18, 0xd7, 0x32, 0xf6, 0xd5, 0x08, 0x5e,
	0x9b, 0x91, 0x35, 0xa5, 0xbd, 0xfc, 0xee, 0x5d, 0x98, 0x98, 0x1e, 0x93, 0x0d, 0x34, 0x3b, 0x0e,
	0xd4, 0x94, 0xc7, 0x22, 0x95, 0xb0, 0x6b, 0xc6, 0xd7, 0x67, 0xe3, 0xe7, 0x81, 0x9a, 0x0e, 0x44,
	0x2a, 0xe9, 0x56, 0xfe, 0x5a, 0xb3, 0x8d, 0x3d, 0x33, 0xb4, 0xa4, 0xb4, 0x67, 0x76, 0xb1, 0x43,
	0x96, 0x33, 0x1a, 0x8b, 0x88, 0xc7, 0x3a, 0x84, 0x37, 0x46, 0xab, 0x4a, 0x7b, 0xe7, 0x22, 0x1a,
	0xe8, 0x90, 0x36, 0x48, 0x2d, 0xf3, 0x40, 0x24, 0x32, 0xe6, 0xc5, 0x8d, 0x7a, 0x6b, 0x86, 0xfe,
	0x51, 0xda, 0xfb, 0x91, 0xc5, 0x97, 0xf9, 0xcd, 0x2a, 0x26, 0x8b, 0x55, 0xdd, 0x8b, 0xc0, 0x1f,
	0xc1, 0xbb, 0xd9, 0x64, 0xbe, 0xa2, 0xeb, 0x2c, 0xa5, 0xdb, 0x24, 0x7b, 0x01, 0x1f, 0xfa, 0x11,
	0x6f, 0xc2, 0xfb, 0xd9, 0x7a, 0xce, 0xfc, 0xa8, 0x89, 0xcd, 0x81, 0x06, 0x36, 0x07, 0x1b, 0x83,
	0x7d, 0x6c, 0x0c, 0x9b, 0x0b, 0x07, 0xd8, 0x5c, 0x6c, 0x2d, 0xf8, 0x80, 0xad, 0x85, 0xad, 0x0d,
	0x87, 0xd8, 0xda, 0xd8, 0x3a, 0xf0, 0x11, 0x5b, 0x07, 0x5b, 0x17, 0x8e, 0xb0, 0x75, 0xb1, 0xf5,
	0xe0, 0x18, 0x5b, 0x0f, 0x5b, 0x1f, 0x9a, 0xd8, 0xfa, 0xf4, 0x05, 0x21, 0xb3, 0xbd, 0x37, 0xc1,
	0xc9, 0xef, 0x5b, 0xb1, 0xf9, 0xa6, 0xa5, 0x0e, 0x30, 0x4b, 0x1d, 0x4b, 0x19, 0xb8, 0x96, 0x32,
	0x4b, 0x5d, 0x68, 0x59, 0xea, 0x5a, 0xda, 0x82, 0xb6, 0xa5, 0x2d, 0x4b, 0xdb, 0xd0, 0xb1, 0xb4,
	0x6d, 0x69, 0x07, 0xba, 0x96, 0x76, 0x2c, 0xed, 0x42, 0xcf, 0xd2, 0xae, 0xa5, 0x3d, 0xe8, 0x5b,
	0xda, 0xb3, 0xb4, 0x0f, 0x9f, 0x2c, 0xb5, 0xce, 0x8a, 0x35, 0xe1, 0x04, 0x2b, 0xb3, 0xce, 0x8a,
	0x39, 0xf0, 0xd9, 0x52, 0xeb, 0xac, 0x18, 0x83, 0x2f, 0x96, 0x5a, 0x67, 0xc5, 0x5c, 0xf8, 0x6a,
	0xa9, 0x7b, 0x56, 0xf9, 0x55, 0x3e, 0x3a, 0xc9, 0x3e, 0x09, 0xc3, 0xb2, 0xf9, 0x3e, 0xb8, 0x7f,
	0x03, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x4d, 0x37, 0xc6, 0x2b, 0x06, 0x00, 0x00,
}
